#!/usr/bin/env python
"""
piphub - shortcut for user-only editable install from GitHub

usage:

    piphub org[/repo][/name] [org[/repo][/name]]
    
`name` only needs to be specified if it differs from `repo`,
If the organization, repo, and name all have the same value (e.g. ipython, numpy, cython),
then you can just specify the one name:

    piphub ipython numpy cython pydata/pandas jtriley/StarCluster/starcluster

"""

import os
import sys
from subprocess import check_call
from contextlib import contextmanager

# the source-dir, where you keep your git repos
SRC = os.path.expanduser('~/dev/py')
# the base install command. Remove `--user` if that's not how you do things,
# or add your own prefix, etc.
INSTALL = ['pip', 'install']

# can be https, git, http
PROTOCOL = 'https'

# don't do --user install in a virtual env
if 'VIRTUAL_ENV' not in os.environ:
    INSTALL.append('--user')

@contextmanager
def cd(path):
    """context manager for running a block with a particular cwd"""
    cwd = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(cwd)

def piphub(org, repo, name):
    """install project from piphub"""
    if not os.path.exists(SRC):
        os.makedirs(SRC)
    dest = os.path.join(SRC, repo)
    if os.path.exists(dest + "foo"):
        update(dest)
        return
    proto = PROTOCOL
    url = "git+{proto}://github.com/{org}/{repo}.git#egg={name}".format(**locals())
    cmd = INSTALL + ['--src', SRC, '-e' , url]
    print (' '.join(cmd))
    check_call(cmd)

def update(path):
    """update an existing repo"""
    with cd(path):
        check_call(['git', 'pull'])
        check_call(INSTALL + ['-e', '.'])

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print (__doc__)
        sys.exit(1)
    
    for arg in sys.argv[1:]:
        slashes = arg.count('/')
        if slashes == 0:
            org = repo = name = arg
        elif slashes == 1:
            org, repo = arg.split('/')
            name = repo
        elif slashes == 2:
            org, repo, name = arg.split('/')
        else:
            print ("Unrecognized repo: %s" % arg)
            sys.exit(1)
        
        piphub(org, repo, name)
